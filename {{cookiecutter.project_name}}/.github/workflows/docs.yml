name: Documentation

on:
  push:
    branches:
      - main
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

{% if cookiecutter.dependency_manager_tool == "poetry" %}
      - name: Install Poetry
        run: |
          pipx install --pip-args "-c ${{ "{{ github.workspace }}" }}/.github/workflows/constraints.txt" poetry
          pipx inject poetry poetry-plugin-export
          poetry --version

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"
          cache: "poetry"
{% else %}
      - name: Get uv version from constraints
        id: uv-version
        shell: pwsh
        run: |
          $UV_VERSION = (Get-Content .github/workflows/constraints.txt | Where-Object { $_ -match '^uv==' } | ForEach-Object { ($_ -split '==')[1] })
          echo "version=$UV_VERSION" >> $env:GITHUB_OUTPUT

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          version: {{ "${{ steps.uv-version.outputs.version }}" }}
          python-version: "3.12"
{% endif %}

      - name: Install dependencies
        run: |
{% if cookiecutter.dependency_manager_tool == "poetry" %}
          poetry install
{% else %}
          uv sync --locked --only-dev
{% endif %}

      - name: Build doc with Sphinx
        run: |
{% if cookiecutter.dependency_manager_tool == "poetry" %}
          poetry run sphinx-build docs docs/_build
{% else %}
          uv run sphinx-build docs docs/_build
{% endif %}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "docs/_build"

  deploy:
    environment:
      name: github-pages
      url: {{ "${{ steps.deployment.outputs.page_url }}" }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
